unit ClientEdit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Mask, DBCtrlsEh, MemTableDataEh, Db, ADODB,
  DataDriverEh, ADODataDriverEh;

type
  TOldRecord = record
     address  : String;
     address2 : String;
     email    : String;
     email2   : String;
     phone    : String;
     phone2   : String;
  end;
  TClientEditForm = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Button1: TButton;
    Button2: TButton;
    DBEditEh1: TDBEditEh;
    DBEditEh2: TDBEditEh;
    DBEditEh3: TDBEditEh;
    DBEditEh4: TDBEditEh;
    DBEditEh5: TDBEditEh;
    DBEditEh6: TDBEditEh;
    DBEditEh7: TDBEditEh;
    DBEditEh8: TDBEditEh;
    Label10: TLabel;
    DBDateTimeEditEh1: TDBDateTimeEditEh;
    procedure DBEditEh1KeyPress(Sender: TObject; var Key: Char);
    procedure DBEditEh2KeyPress(Sender: TObject; var Key: Char);
    procedure DBEditEh3KeyPress(Sender: TObject; var Key: Char);
    procedure DBEditEh4KeyPress(Sender: TObject; var Key: Char);
    procedure DBEditEh5KeyPress(Sender: TObject; var Key: Char);
    procedure DBEditEh6KeyPress(Sender: TObject; var Key: Char);
    procedure DBEditEh7KeyPress(Sender: TObject; var Key: Char);
    procedure DBEditEh8KeyPress(Sender: TObject; var Key: Char);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    //function CheckEmptyFields:boolean;
    oldRecord : TOldRecord;
  public
    { Public declarations }
  end;

var
  ClientEditForm: TClientEditForm;

implementation

uses ClientList;

{$R *.dfm}


procedure TClientEditForm.DBEditEh1KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(VK_RETURN)) and (length(DBEditEh1.Text) > 0) then
     DBEditEh2.SetFocus;
end;

procedure TClientEditForm.DBEditEh2KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(VK_RETURN)) and (length(DBEditEh2.Text) > 0) then
     DBEditEh3.SetFocus;
end;

procedure TClientEditForm.DBEditEh3KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(VK_RETURN)) and (length(DBEditEh3.Text) > 0) then
     DBEditEh4.SetFocus;
end;

procedure TClientEditForm.DBEditEh4KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = Char(VK_RETURN) then
     DBEditEh5.SetFocus;
end;

procedure TClientEditForm.DBEditEh5KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = Char(VK_RETURN) then
     DBEditEh6.SetFocus;
end;

procedure TClientEditForm.DBEditEh6KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = Char(VK_RETURN) then
     DBEditEh7.SetFocus;
end;

procedure TClientEditForm.DBEditEh7KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(VK_RETURN)) and (length(DBEditEh7.Text) > 0) then
     DBEditEh8.SetFocus;
end;

procedure TClientEditForm.DBEditEh8KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = Char(VK_RETURN) then
     Button1.SetFocus;
end;

procedure TClientEditForm.Button1Click(Sender: TObject);
var
  curID: Integer;
begin
  if length(DBEditEh1.Text) = 0 then
    begin
       MessageDlg('Заполните поле Имя',mtError,[mbOK],0);
       DBEditEh1.SetFocus;
       Exit;
    end;
  if length(DBEditEh2.Text) = 0 then
    begin
       MessageDlg('Заполните поле Фамилия',mtError,[mbOK],0);
       DBEditEh2.SetFocus;
       Exit;
    end;
  if length(DBEditEh3.Text) = 0 then
    begin
       MessageDlg('Заполните поле Адрес',mtError,[mbOK],0);
       DBEditEh3.SetFocus;
       Exit;
    end;
  if length(DBEditEh7.Text) = 0 then
    begin
       MessageDlg('Заполните поле Телефон',mtError,[mbOK],0);
       DBEditEh7.SetFocus;
       Exit;
    end;
  // Запись информации и переоткрытие таблицы
  {
  try
    begin
     ClientListForm.MemTableEh1.Post;
     ClientListForm.MemTableEh1.ApplyUpdates(-1);
    end
  except
     on E:Exception Do
      begin
        ShowMessage('Ошибка при работе с БД '+e.Message)
      end
  end;
  }
  with clientListForm do
    begin
       if not ADOConnection1.Connected then
          ADOConnection1.Open; 
       ADOConnection1.BeginTrans;
       try
          // Заполнение основной таблицы
          MemTableEh1.Post;
          //Label13.Caption := ADODataDriverEh1.InsertCommand.Parameters.ParamValues['new_id'];
          // Получение идентификатора
          if flagInsert then
             begin
                AdoQuery1.SQL.Clear;
                //ADOQuery1.SQL.Text := 'select @@identity as LastInsertedID';
                ADOQuery1.SQL.Text := 'select max(id) from clients';
                ADOQuery1.Open;
                curID:= ADOQuery1.Fields[0].AsInteger;
             end
          else
             curID := strtoint(DbGridEh1.FieldColumns['id'].DisplayText);
          //Label13.Caption := inttostr(curID);
          //Работа с дополнительными таблицами
          {
          if not flagInsert then
             begin
                // При редактировании удаляем всю дополнительную информацию и заново добавляем
                AdoQuery1.SQL.Clear;
                ADOQuery1.SQL.Add('delete from addresses where client_id = :id');
                ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
                ADOQuery1.ExecSQL;
                AdoQuery1.SQL.Clear;
                ADOQuery1.SQL.Add('delete from phones where client_id = :id');
                ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
                ADOQuery1.ExecSQL;
                AdoQuery1.SQL.Clear;
                ADOQuery1.SQL.Add('delete from emails where client_id = :id');
                ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
                ADOQuery1.ExecSQL;
            end;
          }
          {
          if length(DBEditEh3.Text) <> 0 then
            begin
              AdoQuery1.SQL.Clear;
              ADOQuery1.SQL.Add('insert into addresses (client_id, num, address) values (:id, 1, :address)');
              ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
              ADOQuery1.Parameters.ParamByName('address').Value := DBEditEh3.Text;
              ADOQuery1.ExecSQL;
            end;
          }
          AdoQuery1.SQL.Clear;
          ADOQuery1.Parameters.ParamByName('id').Value := curID;
          ADOQuery1.Parameters.ParamByName('address').Value := DBEditEh3.Text;
          // Адрес
          if length(DBEditEh3.Text) <> 0 then
              if length(oldRecord.address) = 0 then
                 ADOQuery1.SQL.Add('insert into addresses (client_id, num, address) values (:id, 1, :address)');
              else
                 ADOQuery1.SQL.Add('update addresses set address = :address where client_id = :id and num = 1');
          else
              if (not flagInsert) and (length(oldRecord.address) <> 0) then
                 ADOQuery1.SQL.Add('delete from addresses where client_id = :id and num = 1');
          {
          if length(DBEditEh4.Text) <> 0 then
            begin
              AdoQuery1.SQL.Clear;
              ADOQuery1.SQL.Add('insert into addresses (client_id, num, address) values (:id, 2, :address)');
              ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
              ADOQuery1.Parameters.ParamByName('address').Value := DBEditEh4.Text;
              ADOQuery1.ExecSQL;
            end;
          }
          // Дополнительный адрес
          if length(DBEditEh4.Text) <> 0 then
              if length(oldRecord.address2) = 0 then
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('insert into addresses (client_id, num, address) values (:id, 2, :address)');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('address').Value := DBEditEh4.Text;
                   ADOQuery1.ExecSQL;
                 end
              else
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('update addresses set address = :address where client_id = :id and num = 2');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('address').Value := DBEditEh4.Text;
                   ADOQuery1.ExecSQL;
                 end
          else
            begin
              if (not flagInsert) and (length(oldRecord.address2) <> 0) then
                begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('delete from addresses where client_id = :id and num = 2');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.ExecSQL;
                end;
            end;
          {
          if length(DBEditEh5.Text) <> 0 then
            begin
              AdoQuery1.SQL.Clear;
              ADOQuery1.SQL.Add('insert into emails (client_id, num, email) values (:id, 1, :email)');
              ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
              ADOQuery1.Parameters.ParamByName('email').Value := DBEditEh5.Text;
              ADOQuery1.ExecSQL;
            end;
          }
          // Почта
          if length(DBEditEh5.Text) <> 0 then
              if length(oldRecord.email) = 0 then
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('insert into emails (client_id, num, email) values (:id, 1, :email)');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('email').Value := DBEditEh5.Text;
                   ADOQuery1.ExecSQL;
                 end
              else
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('update emails set email = :email where client_id = :id and num = 1');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('email').Value := DBEditEh5.Text;
                   ADOQuery1.ExecSQL;
                 end
          else
            begin
              if (not flagInsert) and (length(oldRecord.email) <> 0) then
                begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('delete from emails where client_id = :id and num = 1');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.ExecSQL;
                end;
            end;
          {
          if length(DBEditEh6.Text) <> 0 then
            begin
              AdoQuery1.SQL.Clear;
              ADOQuery1.SQL.Add('insert into emails (client_id, num, email) values (:id, 2, :email)');
              ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
              ADOQuery1.Parameters.ParamByName('email').Value := DBEditEh6.Text;
              ADOQuery1.ExecSQL;
            end;
          }
          // Дополнительная почта
          if length(DBEditEh6.Text) <> 0 then
              if length(oldRecord.email2) = 0 then
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('insert into emails (client_id, num, email) values (:id, 2, :email)');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('email').Value := DBEditEh6.Text;
                   ADOQuery1.ExecSQL;
                 end
              else
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('update emails set email = :email where client_id = :id and num = 2');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('email').Value := DBEditEh6.Text;
                   ADOQuery1.ExecSQL;
                 end
          else
            begin
              if (not flagInsert) and (length(oldRecord.email2) <> 0) then
                begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('delete from emails where client_id = :id and num = 2');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.ExecSQL;
                end;
            end;
          {
          if length(DBEditEh7.Text) <> 0 then
            begin
              AdoQuery1.SQL.Clear;
              ADOQuery1.SQL.Add('insert into phones (client_id, num, phone) values (:id, 1, :phone)');
              ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
              ADOQuery1.Parameters.ParamByName('phone').Value := DBEditEh7.Text;
              ADOQuery1.ExecSQL;
            end;
          }
          // Телефон
          if length(DBEditEh7.Text) <> 0 then
              if length(oldRecord.phone) = 0 then
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('insert into phones (client_id, num, phone) values (:id, 1, :phone)');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('phone').Value := DBEditEh7.Text;
                   ADOQuery1.ExecSQL;
                 end
              else
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('update phones set phone = :phone where client_id = :id and num = 1');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('phone').Value := DBEditEh7.Text;
                   ADOQuery1.ExecSQL;
                 end
          else
            begin
              if (not flagInsert) and (length(oldRecord.phone) <> 0) then
                begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('delete from phones where client_id = :id and num = 1');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.ExecSQL;
                end;
            end;
          {
          if length(DBEditEh8.Text) <> 0 then
            begin
              AdoQuery1.SQL.Clear;
              ADOQuery1.SQL.Add('insert into phones (client_id, num, phone) values (:id, 2, :phone)');
              ADOQuery1.Parameters.ParamByName('id').Value := DbGridEh1.FieldColumns['id'].DisplayText;
              ADOQuery1.Parameters.ParamByName('phone').Value := DBEditEh7.Text;
              ADOQuery1.ExecSQL;
            end;
          }
          // Дополнительный телефон
          if length(DBEditEh8.Text) <> 0 then
              if length(oldRecord.phone2) = 0 then
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('insert into phones (client_id, num, phone) values (:id, 2, :phone)');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('phone').Value := DBEditEh8.Text;
                   ADOQuery1.ExecSQL;
                 end
              else
                 begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('update phones set phone = :phone where client_id = :id and num = 2');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.Parameters.ParamByName('phone').Value := DBEditEh8.Text;
                   ADOQuery1.ExecSQL;
                 end
          else
            begin
              if (not flagInsert) and (length(oldRecord.phone2) <> 0) then
                begin
                   AdoQuery1.SQL.Clear;
                   ADOQuery1.SQL.Add('delete from phones where client_id = :id and num = 2');
                   ADOQuery1.Parameters.ParamByName('id').Value := curID;
                   ADOQuery1.ExecSQL;
                end;
            end;
          MemTableEh1.ApplyUpdates(0);
          ADOConnection1.CommitTrans;
          DbGridEh1.Refresh;
       except
          on E:Exception Do
            begin
              MemTableEh1.Cancel;
              ADOConnection1.RollBackTrans;
              //ShowMessage('Ошибка при удалении клиента: '+e.Message);
              raise;
            end;
       end;
    end;
  clientEditForm.close;
end;

procedure TClientEditForm.Button2Click(Sender: TObject);
begin
   //clientListForm.MemTableEh1.Cancel;
   clientEditForm.close;
end;

procedure TClientEditForm.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  clientListForm.MemTableEh1.Cancel;
end;

procedure TClientEditForm.FormCreate(Sender: TObject);
begin
  if clientListForm.flagInsert then
      begin
       clientListForm.MemTableEh1.Append;
       // Сохранение старых полей
       oldRecord.address := '';
       oldRecord.address2 := '';
       oldRecord.email := '';
       oldRecord.email2 := '';
       oldRecord.phone := '';
       oldRecord.phone2 := '';
     end
  else
     begin
       clientListForm.MemTableEh1.Edit;
       // Сохранение старых полей
       oldRecord.address := clientListForm.MemTableEh1.FieldByName('address').AsString;
       oldRecord.address2 := clientListForm.MemTableEh1.FieldByName('address2').AsString;
       oldRecord.email := clientListForm.MemTableEh1.FieldByName('email').AsString;
       oldRecord.email2 := clientListForm.MemTableEh1.FieldByName('email2').AsString;
       oldRecord.phone := clientListForm.MemTableEh1.FieldByName('phone').AsString;
       oldRecord.phone2 := clientListForm.MemTableEh1.FieldByName('phone2').AsString;
     end;
end;

end.
